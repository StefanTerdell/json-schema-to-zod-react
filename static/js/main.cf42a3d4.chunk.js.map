{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["JsonSchemaToZod","useState","json","setJson","zod","setZod","errors","setErrors","name","setName","module","setModule","useEffect","parsed","json5","parse","jsonSchemaToZodDereffed","then","x","console","log","catch","e","version","style","display","flexDirection","margin","padding","border","value","onChange","target","type","checked","width","height","disabled","onClick","JSON","stringify","format","color","select","copy","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAMaA,EAAkB,WAC7B,MAAwBC,mBAAS,MAAK,mBAA/BC,EAAI,KAAEC,EAAO,KACpB,EAAsBF,mBAAS,IAAG,mBAA3BG,EAAG,KAAEC,EAAM,KAClB,EAA4BJ,mBAAS,IAAG,mBAAjCK,EAAM,KAAEC,EAAS,KACxB,EAAwBN,mBAAS,IAAG,mBAA7BO,EAAI,KAAEC,EAAO,KACpB,EAA4BR,oBAAS,GAAK,mBAAnCS,EAAM,KAAEC,EAAS,KAExBC,qBAAU,WACR,IACE,IAAMC,EAASC,IAAMC,MAAMb,GAC3BK,EAAU,IACVS,kCAAwBH,EAAeL,EAAME,GAC1CO,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZb,EAAOa,EACT,IACCG,OAAM,SAACC,GAAC,OAAKf,EAAU,YAAD,OAAae,GAAI,GAG5C,CAFE,MAAOA,GACPf,EAAU,YAAD,OAAae,GACxB,CACF,GAAG,CAACpB,EAAMM,EAAME,IAUhB,OACE,qCACE,+BAAI,sBAAoBa,OACxB,sBAAKC,MAAO,CAAEC,QAAS,QAAS,UAC9B,sBACED,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,OAAQ,GACRC,QAAS,GACTC,OAAQ,kBACR,UAEF,4BAAG,gBACH,uBAAOC,MAAOtB,EAAMuB,SAAU,SAACT,GAAC,OAAKb,EAAQa,EAAEU,OAAOF,MAAM,IAC5D,4BAAG,WACH,uBACEG,KAAK,WACLC,QAASxB,EACTqB,SAAU,SAACT,GAAC,OAAKX,EAAUW,EAAEU,OAAOE,QAAQ,IAE9C,4BAAG,gBACH,0BACEV,MAAO,CAAEW,MAAO,IAAKC,OAAQ,KAC7BN,MAAO5B,EACP6B,SAAU,SAACT,GAAC,OAAKnB,EAAQmB,EAAEU,OAAOF,MAAM,IAE1C,wBACEN,MAAO,CAAEW,MAAO,QAChBE,WAAY/B,EACZgC,QAAS,kBAtCJ,WACb,IACEnC,EAAQoC,KAAKC,UAAU1B,IAAMC,MAAMb,GAAO,KAAM,GAGlD,CAFE,MAAOoB,GACPf,EAAU,YAAD,OAAae,GACxB,CACF,CAgCyBmB,EAAQ,EAAC,SACzB,cAIH,sBACEjB,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,OAAQ,GACRC,QAAS,GACTC,OAAQ,kBACR,UAEF,4BAAG,WACH,0BACEL,MAAO,CACLW,MAAO,IACPC,OAAQ,IACRM,MAAOpC,EAAS,MAAQ,SAE1BwB,MAAOxB,GAAUF,EAEjBkC,QAAS,SAAChB,GAAC,eAAoB,QAApB,GAAK,EAAAA,EAAEU,QAAOW,cAAM,aAAf,SAAmB,IAErC,wBACEnB,MAAO,CAAEW,MAAO,QAChBE,WAAY/B,EACZgC,QAAS,kBAAMM,IAAKxC,EAAI,EAAC,SAC1B,eAKL,mBAAGyC,KAAK,mDAAkD,SAAC,iCAG3D,uBACA,mBAAGA,KAAK,0DAAyD,SAAC,qEAKxE,EC/FeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB/B,MAAK,YAAkD,IAA/CgC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECPAO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1BZ,G","file":"static/js/main.cf42a3d4.chunk.js","sourcesContent":["import copy from \"copy-to-clipboard\";\r\nimport { jsonSchemaToZodDereffed } from \"json-schema-to-zod\";\r\nimport { version } from \"json-schema-to-zod/package.json\";\r\nimport json5 from \"json5\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport const JsonSchemaToZod = () => {\r\n  const [json, setJson] = useState(\"{}\");\r\n  const [zod, setZod] = useState(\"\");\r\n  const [errors, setErrors] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [module, setModule] = useState(true);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const parsed = json5.parse(json);\r\n      setErrors(\"\");\r\n      jsonSchemaToZodDereffed(parsed as any, name, module)\r\n        .then((x) => {\r\n          console.log(x);\r\n          setZod(x);\r\n        })\r\n        .catch((e) => setErrors(`Errors:\\n${e}`));\r\n    } catch (e) {\r\n      setErrors(`Errors:\\n${e}`);\r\n    }\r\n  }, [json, name, module]);\r\n\r\n  const format = () => {\r\n    try {\r\n      setJson(JSON.stringify(json5.parse(json), null, 2));\r\n    } catch (e) {\r\n      setErrors(`Errors:\\n${e}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Json Schema To Zod {version}</h1>\r\n      <div style={{ display: \"flex\" }}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            margin: 10,\r\n            padding: 10,\r\n            border: \"1px solid grey\",\r\n          }}\r\n        >\r\n          <b>Schema name</b>\r\n          <input value={name} onChange={(e) => setName(e.target.value)}></input>\r\n          <b>Module</b>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={module}\r\n            onChange={(e) => setModule(e.target.checked)}\r\n          ></input>\r\n          <b>Json Schema</b>\r\n          <textarea\r\n            style={{ width: 400, height: 400 }}\r\n            value={json}\r\n            onChange={(e) => setJson(e.target.value)}\r\n          ></textarea>\r\n          <button\r\n            style={{ width: \"100%\" }}\r\n            disabled={!!errors}\r\n            onClick={() => format()}\r\n          >\r\n            Format\r\n          </button>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            margin: 10,\r\n            padding: 10,\r\n            border: \"1px solid grey\",\r\n          }}\r\n        >\r\n          <b>Result</b>\r\n          <textarea\r\n            style={{\r\n              width: 400,\r\n              height: 476,\r\n              color: errors ? \"red\" : \"black\",\r\n            }}\r\n            value={errors || zod}\r\n            // @ts-expect-error\r\n            onClick={(e) => e.target.select?.()}\r\n          ></textarea>\r\n          <button\r\n            style={{ width: \"100%\" }}\r\n            disabled={!!errors}\r\n            onClick={() => copy(zod)}\r\n          >\r\n            Copy\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <a href=\"https://www.npmjs.com/package/json-schema-to-zod\">\r\n        Get the CLI NPM package here\r\n      </a>\r\n      <br />\r\n      <a href=\"https://www.github.com/stefanTerdell/json-schema-to-zod\">\r\n        Log an issue, open a feature PR or just leave a ‚≠ê here ^^\r\n      </a>\r\n    </>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { JsonSchemaToZod as App } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}