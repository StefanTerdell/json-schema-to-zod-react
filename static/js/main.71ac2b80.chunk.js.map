{"version":3,"sources":["json-schema-to-zod/parsers/parseAllOf.ts","json-schema-to-zod/utils/half.ts","json-schema-to-zod/parsers/parseArray.ts","json-schema-to-zod/parsers/parseSchema.ts","json-schema-to-zod/parsers/parseObject.ts","json-schema-to-zod/parsers/parseMultipleType.ts","json-schema-to-zod/parsers/parseAnyOf.ts","json-schema-to-zod/parsers/parseNot.ts","json-schema-to-zod/parsers/parseEnum.ts","json-schema-to-zod/parsers/parseConst.ts","json-schema-to-zod/parsers/parseString.ts","json-schema-to-zod/parsers/parseNumber.ts","json-schema-to-zod/parsers/parseBoolean.ts","json-schema-to-zod/parsers/parseNull.ts","json-schema-to-zod/parsers/parseIfThenElse.ts","json-schema-to-zod/parsers/parseDefault.ts","json-schema-to-zod/utils/format.ts","json-schema-to-zod/jsonSchemaToZod.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseAllOf","schema","allOf","length","parseSchema","arr","slice","Math","floor","left","right","is","x","type","Array","isArray","anyOf","not","enum","const","p","Boolean","if","then","else","properties","Object","entries","map","k","v","required","includes","additionalProperties","parseObject","r","items","undefined","minItems","maxItems","parseArray","parseMultipleType","parseAnyOf","JSON","stringify","parseEnum","parseConst","pattern","format","minLength","maxLength","parseString","multipleOf","minimum","maximum","exclusiveMinimum","exclusiveMaximum","parseNumber","$if","$then","$else","parseIfThenElse","source","prettier","parser","plugins","babelParser","jsonSchemaToZod","name","module","JsonSchemaToZod","useState","json","setJson","zod","setZod","errors","setErrors","setName","setModule","useEffect","parsed","json5","parse","$RefParser","dereference","console","log","catch","e","style","display","flexDirection","margin","padding","border","value","onChange","target","checked","width","height","disabled","onClick","color","select","copy","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71ac2b80.chunk.js","sourcesContent":["import { JSONSchema7, JSONSchema7Definition } from \"json-schema\";\r\nimport { parseSchema } from \"./parseSchema\";\r\nimport { half } from \"../utils/half\";\r\n\r\nexport function parseAllOf(\r\n  schema: JSONSchema7 & { allOf: JSONSchema7Definition[] }\r\n): string {\r\n  if (schema.allOf.length === 0) {\r\n    return \"z.any()\";\r\n  } else if (schema.allOf.length === 1) {\r\n    return parseSchema(schema.allOf[0]);\r\n  } else {\r\n    const [left, right] = half(schema.allOf);\r\n    return `z.intersection(${parseAllOf({ allOf: left })},${parseAllOf({\r\n      allOf: right,\r\n    })})`;\r\n  }\r\n}\r\n","export const half = <T>(arr: T[]): [T[],T[]] => {\r\n    return arr.length ? [arr.slice(0, Math.floor(arr.length / 2)), arr.slice(Math.floor(arr.length / 2))] : [[],[]]\r\n}\r\n","import { JSONSchema7 } from \"json-schema\";\r\nimport { parseSchema } from \"./parseSchema\";\r\n\r\nexport const parseArray = (schema: JSONSchema7 & { type: \"array\" }) => {\r\n  let r = !schema.items\r\n    ? \"z.array(z.any())\"\r\n    : Array.isArray(schema.items)\r\n    ? `z.tuple([${schema.items.map(parseSchema)}])`\r\n    : `z.array(${parseSchema(schema.items)})`;\r\n  if (schema.minItems !== undefined) r += `.min(${schema.minItems})`;\r\n  if (schema.maxItems !== undefined) r += `.max(${schema.maxItems})`;\r\n  return r;\r\n};\r\n","import { parseAnyOf } from \"./parseAnyOf\";\r\nimport { parseBoolean } from \"./parseBoolean\";\r\nimport { parseDefault } from \"./parseDefault\";\r\nimport { parseMultipleType } from \"./parseMultipleType\";\r\nimport { parseNot } from \"./parseNot\";\r\nimport { parseNull } from \"./parseNull\";\r\nimport { parseAllOf } from \"./parseAllOf\";\r\nimport { parseArray } from \"./parseArray\";\r\nimport { parseConst } from \"./parseConst\";\r\nimport { parseEnum } from \"./parseEnum\";\r\nimport { parseIfThenElse } from \"./parseIfThenElse\";\r\nimport { parseNumber } from \"./parseNumber\";\r\nimport { parseObject } from \"./parseObject\";\r\nimport { parseString } from \"./parseString\";\r\nimport {\r\n  JSONSchema7,\r\n  JSONSchema7Definition,\r\n  JSONSchema7Type,\r\n  JSONSchema7TypeName,\r\n} from \"json-schema\";\r\n\r\nconst is = {\r\n  object: (x: JSONSchema7): x is JSONSchema7 & { type: \"object\" } =>\r\n    x.type === \"object\",\r\n  array: (x: JSONSchema7): x is JSONSchema7 & { type: \"array\" } =>\r\n    x.type === \"array\",\r\n  multipleType: (\r\n    x: JSONSchema7\r\n  ): x is JSONSchema7 & { type: JSONSchema7TypeName[] } =>\r\n    Array.isArray(x.type),\r\n  anyOf: (\r\n    x: JSONSchema7\r\n  ): x is JSONSchema7 & {\r\n    anyOf: JSONSchema7Definition[];\r\n  } => !!x.anyOf,\r\n  allOf: (\r\n    x: JSONSchema7\r\n  ): x is JSONSchema7 & {\r\n    allOf: JSONSchema7Definition[];\r\n  } => !!x.allOf,\r\n  not: (\r\n    x: JSONSchema7\r\n  ): x is JSONSchema7 & {\r\n    not: JSONSchema7Definition;\r\n  } => !!x.not,\r\n  enum: (\r\n    x: JSONSchema7\r\n  ): x is JSONSchema7 & {\r\n    enum: JSONSchema7Type | JSONSchema7Type[];\r\n  } => !!x.enum,\r\n  const: (\r\n    x: JSONSchema7\r\n  ): x is JSONSchema7 & {\r\n    const: JSONSchema7Type;\r\n  } => !!x.const,\r\n  primitive: <T extends \"string\" | \"number\" | \"integer\" | \"boolean\" | \"null\">(\r\n    x: JSONSchema7,\r\n    p: T\r\n  ): x is JSONSchema7 & { type: T } => x.type === p,\r\n  conditional: (\r\n    x: JSONSchema7\r\n  ): x is JSONSchema7 & {\r\n    if: JSONSchema7Definition;\r\n    then: JSONSchema7Definition;\r\n    else: JSONSchema7Definition;\r\n  } => Boolean(x.if && x.then && x.else),\r\n};\r\n\r\nexport const parseSchema = (schema: JSONSchema7 | boolean): string => {\r\n  if (typeof schema !== \"object\") return \"z.unknown()\";\r\n  if (is.object(schema)) {\r\n    return parseObject(schema);\r\n  } else if (is.array(schema)) {\r\n    return parseArray(schema);\r\n  } else if (is.multipleType(schema)) {\r\n    return parseMultipleType(schema);\r\n  } else if (is.anyOf(schema)) {\r\n    return parseAnyOf(schema);\r\n  } else if (is.allOf(schema)) {\r\n    return parseAllOf(schema);\r\n  } else if (is.not(schema)) {\r\n    return parseNot(schema);\r\n  } else if (is.enum(schema)) {\r\n    return parseEnum(schema); //<-- needs to come before primitives\r\n  } else if (is.const(schema)) {\r\n    return parseConst(schema);\r\n  } else if (is.primitive(schema, \"string\")) {\r\n    return parseString(schema);\r\n  } else if (is.primitive(schema, \"number\")) {\r\n    return parseNumber(schema);\r\n  } else if (is.primitive(schema, \"boolean\")) {\r\n    return parseBoolean(schema);\r\n  } else if (is.primitive(schema, \"null\")) {\r\n    return parseNull(schema);\r\n  } else if (is.conditional(schema)) {\r\n    return parseIfThenElse(schema);\r\n  } else {\r\n    return parseDefault(schema);\r\n  }\r\n};\r\n","import { JSONSchema7 } from \"json-schema\";\r\nimport { parseSchema } from \"./parseSchema\";\r\n\r\nconst requiredFlag = \"\"; //\".required()\"\r\nconst defaultAdditionalFlag = \"\"; //\".strip()\"\r\n\r\nexport const parseObject = (schema: JSONSchema7 & { type: \"object\" }) => {\r\n  return !schema.properties\r\n    ? typeof schema.additionalProperties === \"object\"\r\n      ? `z.record(${parseSchema(schema.additionalProperties)})`\r\n      : \"z.object({}).catchall(z.any())\"\r\n    : `z.object({${Object.entries(schema?.properties).map(\r\n        ([k, v]) =>\r\n          `'${k}':${parseSchema(v)}${\r\n            schema.required?.includes(k) ? requiredFlag : \".optional()\"\r\n          }`\r\n      )}})${\r\n        schema.additionalProperties === true\r\n          ? \".catchall(z.any())\"\r\n          : schema.additionalProperties === false\r\n          ? \".strict()\"\r\n          : typeof schema.additionalProperties === \"object\"\r\n          ? `.catchall(${parseSchema(schema.additionalProperties)})`\r\n          : defaultAdditionalFlag\r\n      }`;\r\n};\r\n","import { JSONSchema7, JSONSchema7TypeName } from \"json-schema\";\r\nimport { parseSchema } from \"./parseSchema\";\r\n\r\nexport const parseMultipleType = (\r\n  schema: JSONSchema7 & { type: JSONSchema7TypeName[] }\r\n) => {\r\n  return `z.union([${schema.type.map((type) =>\r\n    parseSchema({ ...schema, type })\r\n  )}])`;\r\n};\r\n","import {\r\n  JSONSchema7,\r\n  JSONSchema7Definition\r\n} from \"json-schema\";\r\nimport { parseSchema } from \"./parseSchema\";\r\n\r\nexport const parseAnyOf = (\r\n  schema: JSONSchema7 & { anyOf: JSONSchema7Definition[]; }\r\n) => {\r\n  return `z.union([${schema.anyOf.map(parseSchema)}])`;\r\n};\r\n","import {\r\n  JSONSchema7,\r\n  JSONSchema7Definition\r\n} from \"json-schema\";\r\n\r\nexport const parseNot = (schema: JSONSchema7 & { not: JSONSchema7Definition; }) => {\r\n  return \"z.undefined()\";\r\n};\r\n","import { JSONSchema7, JSONSchema7Type } from \"json-schema\";\r\n\r\nexport const parseEnum = (\r\n  schema: JSONSchema7 & { enum: JSONSchema7Type[] | JSONSchema7Type }\r\n) => {\r\n  return Array.isArray(schema.enum)\r\n    ? `z.enum([${schema.enum.map((x: any) => JSON.stringify(x))}])`\r\n    : `z.literal(${JSON.stringify(schema.enum)})`;\r\n};\r\n","import { JSONSchema7, JSONSchema7Type } from \"json-schema\";\r\n\r\nexport const parseConst = (\r\n  schema: JSONSchema7 & { const: JSONSchema7Type }\r\n) => {\r\n  return `z.literal(${JSON.stringify(schema.const)})`;\r\n};\r\n","import { JSONSchema7 } from \"json-schema\";\r\n\r\nexport const parseString = (schema: JSONSchema7 & { type: \"string\" }) => {\r\n  let r = \"z.string()\";\r\n  if (schema.pattern) r += `.regex(new RegExp(\"${schema.pattern}\"))`;\r\n  if (schema.format === \"email\") r += \".email()\";\r\n  else if (schema.format === \"uri\") r += \".url()\";\r\n  else if (schema.format === \"uuid\") r += \".uuid()\";\r\n  if (schema.minLength !== undefined) r += `.min(${schema.minLength})`;\r\n  if (schema.maxLength !== undefined) r += `.max(${schema.maxLength})`;\r\n  return r;\r\n};\r\n","import { JSONSchema7 } from \"json-schema\";\r\n\r\nexport const parseNumber = (\r\n  schema: JSONSchema7 & { type: \"number\" | \"integer\" }\r\n) => {\r\n  let r = \"z.number()\";\r\n  if (\r\n    schema.format === \"int64\" ||\r\n    schema.multipleOf === 1 ||\r\n    schema.type === \"integer\"\r\n  )\r\n    r += \".int()\";\r\n  if (schema.multipleOf !== undefined && schema.multipleOf !== 1) {\r\n    r += `.multipleOf(${schema.multipleOf})`;\r\n  }\r\n  if (schema.minimum !== undefined) r += `.gte(${schema.minimum})`;\r\n  if (schema.maximum !== undefined) r += `.lte(${schema.maximum})`;\r\n  if (schema.exclusiveMinimum !== undefined)\r\n    r += `.gt(${schema.exclusiveMinimum})`;\r\n  if (schema.exclusiveMaximum !== undefined)\r\n    r += `.lt(${schema.exclusiveMaximum})`;\r\n  return r;\r\n};\r\n","import { JSONSchema7 } from \"json-schema\";\r\n\r\nexport const parseBoolean = (schema: JSONSchema7 & { type: \"boolean\"; }) => {\r\n  return \"z.boolean()\";\r\n};\r\n","import { JSONSchema7 } from \"json-schema\";\r\n\r\nexport const parseNull = (schema: JSONSchema7 & { type: \"null\"; }) => {\r\n  return \"z.null()\";\r\n};\r\n","import { JSONSchema7, JSONSchema7Definition } from \"json-schema\";\r\nimport { parseSchema } from \"./parseSchema\";\r\n\r\nexport const parseIfThenElse = (\r\n  schema: JSONSchema7 & {\r\n    if: JSONSchema7Definition;\r\n    then: JSONSchema7Definition;\r\n    else: JSONSchema7Definition;\r\n  }\r\n): string => {\r\n  const $if = parseSchema(schema.if);\r\n  const $then = parseSchema(schema.then);\r\n  const $else = parseSchema(schema.else);\r\n  return `z.union([${$then},${$else}]).superRefine((value,ctx) => {\r\n  const result = ${$if}.safeParse(value).success\r\n    ? ${$then}.safeParse(value)\r\n    : ${$else}.safeParse(value);\r\n  if (!result.success) {\r\n    result.error.errors.forEach((error) => ctx.addIssue(error))\r\n  }\r\n})`;\r\n};\r\n","import { JSONSchema7 } from \"json-schema\";\r\n\r\nexport const parseDefault = (schema: JSONSchema7) => {\r\n  return \"z.any()\";\r\n};\r\n","import prettier from \"prettier\";\r\nimport babelParser from \"prettier/parser-babel\";\r\n\r\nexport const format = (source: string): string => prettier.format(source, {\r\n    parser: \"babel\",\r\n    plugins: [babelParser],\r\n  })","import { JSONSchema7 } from \"json-schema\";\r\nimport { parseSchema } from \"./parsers/parseSchema\";\r\nimport { format } from \"./utils/format\";\r\n\r\nexport const jsonSchemaToZod = (\r\n  schema: JSONSchema7,\r\n  name?: string,\r\n  module: boolean = true\r\n): string =>\r\n  format(\r\n    `${module ? `import {z} from 'zod'\\n\\nexport ` : \"\"}${\r\n      name ? `const ${name}=` : module ? \"default \" : \"const schema=\"\r\n    }${parseSchema(schema)}`\r\n  );\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { jsonSchemaToZod } from \"./json-schema-to-zod\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport json5 from \"json5\";\r\nimport $RefParser from \"@apidevtools/json-schema-ref-parser\";\r\n\r\nexport const JsonSchemaToZod = () => {\r\n  const [json, setJson] = useState(\"{}\");\r\n  const [zod, setZod] = useState(\"\");\r\n  const [errors, setErrors] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [module, setModule] = useState(true);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const parsed = json5.parse(json);\r\n      setErrors(\"\");\r\n      $RefParser\r\n        .dereference(parsed)\r\n        .then((x) => {\r\n          console.log(x);\r\n          setZod(jsonSchemaToZod(x as any, name, module));\r\n        })\r\n        .catch((e) => setErrors(`Errors:\\n${e}`));\r\n    } catch (e) {\r\n      setErrors(`Errors:\\n${e}`);\r\n    }\r\n  }, [json, name, module]);\r\n\r\n  const format = () => {\r\n    try {\r\n      setJson(JSON.stringify(json5.parse(json), null, 2));\r\n    } catch (e) {\r\n      setErrors(`Errors:\\n${e}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Json Schema To Zod</h1>\r\n      <div style={{ display: \"flex\" }}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            margin: 10,\r\n            padding: 10,\r\n            border: \"1px solid grey\",\r\n          }}\r\n        >\r\n          <b>Schema name</b>\r\n          <input value={name} onChange={(e) => setName(e.target.value)}></input>\r\n          <b>Module</b>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={module}\r\n            onChange={(e) => setModule(e.target.checked)}\r\n          ></input>\r\n          <b>Json Schema</b>\r\n          <textarea\r\n            style={{ width: 400, height: 400 }}\r\n            value={json}\r\n            onChange={(e) => setJson(e.target.value)}\r\n          ></textarea>\r\n          <button\r\n            style={{ width: \"100%\" }}\r\n            disabled={!!errors}\r\n            onClick={() => format()}\r\n          >\r\n            Format\r\n          </button>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            margin: 10,\r\n            padding: 10,\r\n            border: \"1px solid grey\",\r\n          }}\r\n        >\r\n          <b>Result</b>\r\n          <textarea\r\n            style={{\r\n              width: 400,\r\n              height: 476,\r\n              color: errors ? \"red\" : \"black\",\r\n            }}\r\n            value={errors || zod}\r\n            // @ts-expect-error\r\n            onClick={(e) => e.target.select()}\r\n          ></textarea>\r\n          <button\r\n            style={{ width: \"100%\" }}\r\n            disabled={!!errors}\r\n            onClick={() => copy(zod)}\r\n          >\r\n            Copy\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <a href=\"https://www.npmjs.com/package/json-schema-to-zod\">\r\n        Get the CLI NPM package here\r\n      </a>\r\n      <br />\r\n      <a href=\"https://www.github.com/stefanTerdell/json-schema-to-zod\">\r\n        Something borken? Please log an issue here\r\n      </a>\r\n    </>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { JsonSchemaToZod as App } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}