{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["JsonSchemaToZod","useState","json","setJson","zod","setZod","errors","setErrors","name","setName","module","setModule","useEffect","parsed","json5","parse","jsonSchemaToZodDereffed","then","x","console","log","catch","e","style","display","flexDirection","margin","padding","border","value","onChange","target","type","checked","width","height","disabled","onClick","JSON","stringify","format","color","select","copy","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAKaA,EAAkB,WAC7B,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsBF,mBAAS,IAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA4BR,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IACE,IAAMC,EAASC,IAAMC,MAAMb,GAC3BK,EAAU,IACVS,kCAAwBH,EAAeL,EAAME,GAC1CO,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZb,EAAOa,MAERG,OAAM,SAACC,GAAD,OAAOf,EAAU,YAAD,OAAae,OACtC,MAAOA,GACPf,EAAU,YAAD,OAAae,OAEvB,CAACpB,EAAMM,EAAME,IAUhB,OACE,qCACE,oDACA,sBAAKa,MAAO,CAAEC,QAAS,QAAvB,UACE,sBACED,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,OAAQ,GACRC,QAAS,GACTC,OAAQ,kBANZ,UASE,4CACA,uBAAOC,MAAOrB,EAAMsB,SAAU,SAACR,GAAD,OAAOb,EAAQa,EAAES,OAAOF,UACtD,uCACA,uBACEG,KAAK,WACLC,QAASvB,EACToB,SAAU,SAACR,GAAD,OAAOX,EAAUW,EAAES,OAAOE,YAEtC,4CACA,0BACEV,MAAO,CAAEW,MAAO,IAAKC,OAAQ,KAC7BN,MAAO3B,EACP4B,SAAU,SAACR,GAAD,OAAOnB,EAAQmB,EAAES,OAAOF,UAEpC,wBACEN,MAAO,CAAEW,MAAO,QAChBE,WAAY9B,EACZ+B,QAAS,kBAtCJ,WACb,IACElC,EAAQmC,KAAKC,UAAUzB,IAAMC,MAAMb,GAAO,KAAM,IAChD,MAAOoB,GACPf,EAAU,YAAD,OAAae,KAkCDkB,IAHjB,uBAQF,sBACEjB,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,OAAQ,GACRC,QAAS,GACTC,OAAQ,kBANZ,UASE,uCACA,0BACEL,MAAO,CACLW,MAAO,IACPC,OAAQ,IACRM,MAAOnC,EAAS,MAAQ,SAE1BuB,MAAOvB,GAAUF,EAEjBiC,QAAS,SAACf,GAAD,OAAOA,EAAES,OAAOW,YAE3B,wBACEnB,MAAO,CAAEW,MAAO,QAChBE,WAAY9B,EACZ+B,QAAS,kBAAMM,IAAKvC,IAHtB,wBASJ,mBAAGwC,KAAK,mDAAR,0CAGA,uBACA,mBAAGA,KAAK,0DAAR,4DCzFSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d21a0ef3.chunk.js","sourcesContent":["import copy from \"copy-to-clipboard\";\nimport { jsonSchemaToZodDereffed } from \"json-schema-to-zod\";\nimport json5 from \"json5\";\nimport React, { useEffect, useState } from \"react\";\n\nexport const JsonSchemaToZod = () => {\n  const [json, setJson] = useState(\"{}\");\n  const [zod, setZod] = useState(\"\");\n  const [errors, setErrors] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [module, setModule] = useState(true);\n\n  useEffect(() => {\n    try {\n      const parsed = json5.parse(json);\n      setErrors(\"\");\n      jsonSchemaToZodDereffed(parsed as any, name, module)\n        .then((x) => {\n          console.log(x);\n          setZod(x);\n        })\n        .catch((e) => setErrors(`Errors:\\n${e}`));\n    } catch (e) {\n      setErrors(`Errors:\\n${e}`);\n    }\n  }, [json, name, module]);\n\n  const format = () => {\n    try {\n      setJson(JSON.stringify(json5.parse(json), null, 2));\n    } catch (e) {\n      setErrors(`Errors:\\n${e}`);\n    }\n  };\n\n  return (\n    <>\n      <h1>Json Schema To Zod</h1>\n      <div style={{ display: \"flex\" }}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            margin: 10,\n            padding: 10,\n            border: \"1px solid grey\",\n          }}\n        >\n          <b>Schema name</b>\n          <input value={name} onChange={(e) => setName(e.target.value)}></input>\n          <b>Module</b>\n          <input\n            type=\"checkbox\"\n            checked={module}\n            onChange={(e) => setModule(e.target.checked)}\n          ></input>\n          <b>Json Schema</b>\n          <textarea\n            style={{ width: 400, height: 400 }}\n            value={json}\n            onChange={(e) => setJson(e.target.value)}\n          ></textarea>\n          <button\n            style={{ width: \"100%\" }}\n            disabled={!!errors}\n            onClick={() => format()}\n          >\n            Format\n          </button>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            margin: 10,\n            padding: 10,\n            border: \"1px solid grey\",\n          }}\n        >\n          <b>Result</b>\n          <textarea\n            style={{\n              width: 400,\n              height: 476,\n              color: errors ? \"red\" : \"black\",\n            }}\n            value={errors || zod}\n            // @ts-expect-error\n            onClick={(e) => e.target.select()}\n          ></textarea>\n          <button\n            style={{ width: \"100%\" }}\n            disabled={!!errors}\n            onClick={() => copy(zod)}\n          >\n            Copy\n          </button>\n        </div>\n      </div>\n      <a href=\"https://www.npmjs.com/package/json-schema-to-zod\">\n        Get the CLI NPM package here\n      </a>\n      <br />\n      <a href=\"https://www.github.com/stefanTerdell/json-schema-to-zod\">\n        Something borken? Please log an issue here\n      </a>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { JsonSchemaToZod as App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}